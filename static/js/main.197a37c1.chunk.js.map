{"version":3,"sources":["components/InputText/InputText.module.css","components/InputCheckBox/InputCheckBox.module.css","components/Button.tsx","components/InputText/InputText.tsx","components/InputCheckBox/InputCheckBox.tsx","components/Tasks.tsx","components/Todo.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Button","title","disabled","onClick","className","InputText","type","value","onAdd","id","useState","name","setName","error","setError","onAddHandler","trim","onChange","event","currentTarget","onKeyDown","key","ctrlKey","s","okBorder","errorMessage","sample","InputCheckBox","taskId","checked","removeTaskTitle","onChecked","isDone","activeDone","Tasks","tasks","removeTask","changeTaskStatus","toDoListId","length","map","task","Todo","changeFilter","addTask","changeStatus","filter","removeTodoList","allToDoListTasks","App","todolistID1","v1","todolistID2","todoLists","setTodoLists","setTasks","todoListId","todoList","newTask","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.197a37c1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"okBorder\":\"InputText_okBorder__AVBxM\",\"error\":\"InputText_error__2A2dq\",\"sample\":\"InputText_sample__3W8dw\",\"errorMessage\":\"InputText_errorMessage__1B9Fe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"activeDone\":\"InputCheckBox_activeDone__2MuyZ\",\"isDone\":\"InputCheckBox_isDone__3Jikl\"};","import React, {FC} from 'react';\r\n\r\ninterface IButton {\r\n    title: string\r\n    onClick: () => void\r\n    className?: string\r\n    disabled?: boolean\r\n}\r\n\r\nexport const Button:FC<IButton> = ({title, disabled, onClick, className}) => {\r\n    return (\r\n        <button disabled={disabled} onClick={onClick} className={className}>{title}</button>\r\n    );\r\n};","import React, {ChangeEvent, FC, KeyboardEvent, useState} from 'react';\r\nimport s from './InputText.module.css'\r\nimport {Button} from \"../Button\";\r\n\r\ninterface IInputText {\r\n    type: string\r\n    id: string\r\n    value?: string\r\n    onAdd: (value: string, todoListId: string) => void\r\n    className?: string\r\n}\r\n\r\nexport const InputText: FC<IInputText> = ({type, value, onAdd, className, id}) => {\r\n    const [name, setName] = useState<string>(value || '')\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    //функции добавления тасок и отслеживание value инпута\r\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setName(event.currentTarget.value)\r\n        setError(null)\r\n    }\r\n\r\n    const onAddHandler = () => {\r\n        if (name.trim() !== ''){\r\n            onAdd(name, id)\r\n            setName('')\r\n        } else {\r\n            setError('Filed is required')\r\n        }\r\n    }\r\n\r\n    const changeKeyPress = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === 'Enter' && event.ctrlKey) {\r\n            onAddHandler()\r\n            setName('')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input type={type}\r\n                   value={name}\r\n                   onChange={onChangeHandler}\r\n                   onKeyDown={changeKeyPress}\r\n                   className={error ? s.error : s.okBorder}/>\r\n            <Button title={'+'} onClick={onAddHandler}/>\r\n            {error ?\r\n                <div className={s.errorMessage}>{error}</div>\r\n                :\r\n                <div className={s.sample}>{error}</div>}\r\n        </div>\r\n    );\r\n};","import React, {ChangeEvent, FC} from 'react';\r\nimport s from './InputCheckBox.module.css'\r\nimport {Button} from \"../Button\";\r\n\r\ninterface IInputCheckBox {\r\n    title: string\r\n    id: string\r\n    type: string\r\n    taskId: string\r\n    checked: boolean\r\n    removeTaskTitle: (id: string, todoListId: string) => void\r\n    onChecked: (taskId: string, isDone: boolean, todoListId: string) => void\r\n}\r\n\r\nexport const InputCheckBox: FC<IInputCheckBox> = ({title, type, taskId, checked, removeTaskTitle, onChecked, id}) => {\r\n    //функция удаления по кнопке Х\r\n    const onRemoveHandler = () => removeTaskTitle(taskId, id)\r\n    //функция смены checked\r\n    const onChangeCheckboxHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        onChecked(taskId, event.currentTarget.checked, id)\r\n    }\r\n    return (\r\n        <>\r\n            <div>\r\n                <label className={checked ? s.isDone : s.activeDone}>\r\n                <input type={type}\r\n                       onChange={onChangeCheckboxHandler}\r\n                       checked={checked}/>\r\n                {title}</label>\r\n            </div>\r\n            <Button title={'X'} onClick={onRemoveHandler}/>\r\n        </>\r\n    );\r\n};","import React, {FC} from 'react';\r\nimport {ITasks} from \"./Todo\";\r\nimport {InputCheckBox} from \"./InputCheckBox/InputCheckBox\";\r\n\r\ninterface ITasksProps {\r\n    tasks: ITasks[]\r\n    removeTask: (taskId: string, taskTodoId: string) => void\r\n    toDoListId: string\r\n    changeTaskStatus: (taskId: string, isDone: boolean, taskTodoId: string) => void\r\n}\r\n\r\nexport const Tasks: FC<ITasksProps> = ({tasks, removeTask, changeTaskStatus, toDoListId}) => {\r\n    return (\r\n        <>\r\n            {\r\n                tasks.length\r\n                    ? tasks.map(task => {\r\n                        return (\r\n                            <li key={task.id}>\r\n                                <InputCheckBox title={task.title}\r\n                                               id={toDoListId}\r\n                                               type={'checkbox'}\r\n                                               taskId={task.id}\r\n                                               checked={task.isDone}\r\n                                               removeTaskTitle={removeTask}\r\n                                               onChecked={changeTaskStatus}/>\r\n                            </li>\r\n                        )\r\n                    })\r\n                    : <span>No tasks</span>\r\n            }\r\n        </>\r\n    );\r\n};\r\n","import React, {ChangeEvent, KeyboardEvent, FC, useState} from 'react';\r\nimport {IFilter} from \"../App\";\r\nimport {Button} from \"./Button\";\r\nimport {InputText} from \"./InputText/InputText\";\r\nimport {InputCheckBox} from \"./InputCheckBox/InputCheckBox\";\r\nimport {Tasks} from \"./Tasks\";\r\n\r\nexport interface ITasks {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ninterface ITodo {\r\n    title: string\r\n    id: string\r\n    tasks: {[key:string]: ITasks[]}\r\n    removeTask: (id: string, todoListId: string) => void\r\n    removeTodoList: (todoListId: string) => void\r\n    changeFilter: (value: IFilter, todoListId: string) => void\r\n    addTask: (title: string, todoListId: string) => void\r\n    changeStatus: (id: string, isDone: boolean, todoListId: string) => void\r\n    filter: IFilter\r\n}\r\n\r\nexport const Todo: FC<ITodo> = ({title, id, tasks, removeTask, changeFilter, addTask, changeStatus, filter, removeTodoList}) => {\r\n\r\n    //функции фильтра по кнопкам\r\n    const onAllClickHandler = () => changeFilter('all', id)\r\n    const onActiveClickHandler = () => changeFilter('active', id)\r\n    const onCompletedClickHandler = () => changeFilter('completed', id)\r\n    //условия для работы фильтрации\r\n    let allToDoListTasks = tasks[id]\r\n    if (filter === 'completed') {\r\n        allToDoListTasks = allToDoListTasks.filter(task => task.isDone)\r\n    }\r\n    if (filter === 'active') {\r\n        allToDoListTasks = allToDoListTasks.filter(task => !task.isDone)\r\n    }\r\n    //функция удаления ToDoList с тасками\r\n    const onRemoveTodoList = () => removeTodoList(id)\r\n    return (\r\n        <div className='toDo'>\r\n            <h3>{title} <Button title={'x'} onClick={onRemoveTodoList}/></h3>\r\n            <InputText type={'text'}\r\n                       id={id}\r\n                       onAdd={addTask}/>\r\n            <div className='btn-filters'>\r\n                <Button title={'All'} onClick={onAllClickHandler}\r\n                        className={filter === 'all' ? 'filter-btn' + ' active-filter' : 'filter-btn'}/>\r\n                <Button title={'Active'} onClick={onActiveClickHandler}\r\n                        className={filter === 'active' ? 'filter-btn' + ' active-filter' : 'filter-btn'}/>\r\n                <Button title={'Completed'} onClick={onCompletedClickHandler}\r\n                        className={filter === 'completed' ? 'filter-btn' + ' active-filter' : 'filter-btn'}/>\r\n            </div>\r\n            <ul>\r\n                <Tasks tasks={allToDoListTasks}\r\n                       removeTask={removeTask}\r\n                       toDoListId={id}\r\n                       changeTaskStatus={changeStatus}/>\r\n            </ul>\r\n        </div>\r\n    );\r\n};","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {ITasks, Todo} from \"./components/Todo\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport type IFilter = 'all' | 'active' | 'completed'\r\n\r\ninterface IToDoLists {\r\n    id: string\r\n    title: string\r\n    filter: IFilter\r\n}\r\n\r\ninterface ITasksState {\r\n    [key: string]: Array<ITasks>\r\n}\r\n\r\nfunction App() {\r\n\r\n    let todolistID1 = v1()\r\n    let todolistID2 = v1()\r\n\r\n    const [todoLists, setTodoLists] = useState<Array<IToDoLists>>(\r\n        [\r\n            {\r\n                id: todolistID1,\r\n                title: 'What to Learn',\r\n                filter: 'all'\r\n            },\r\n            {\r\n                id: todolistID2,\r\n                title: 'What to Buy',\r\n                filter: 'all'\r\n            }\r\n        ]\r\n    )\r\n\r\n    const [tasks, setTasks] = useState<ITasksState>({\r\n        [todolistID1]: [\r\n            {id: v1(), title: 'HTML&CSS', isDone: true},\r\n            {id: v1(), title: 'JS', isDone: true},\r\n            {id: v1(), title: 'ReactJS', isDone: false},\r\n\r\n        ],\r\n        [todolistID2]: [\r\n            {id: v1(), title: 'Rest API', isDone: true},\r\n            {id: v1(), title: 'GraphQL', isDone: false},\r\n        ]\r\n    })\r\n\r\n    const changeFilter = (value: IFilter, todoListId: string) => {\r\n        setTodoLists(todoLists.map(todoList => todoList.id === todoListId ? {...todoList, filter: value} : todoList))\r\n    }\r\n\r\n    const removeTask = (id: string, todoListId: string) => {\r\n        setTasks({...tasks, [todoListId]: tasks[todoListId].filter(task => task.id !== id)})\r\n    } // функция удаления таски, благодаря useState компонента перерисовывается\r\n\r\n    const addTask = (title: string, todoListId: string) => {\r\n        let newTask = {id: v1(), title: title, isDone: false}\r\n        setTasks({...tasks, [todoListId]: [newTask, ...tasks[todoListId]]})\r\n    } // делаем наш стейт иммутабельным для изменения\r\n\r\n    const changeStatus = (taskId: string, isDone: boolean, todoListId: string) => {\r\n        setTasks({...tasks, [todoListId]: tasks[todoListId].map(task => task.id === taskId ? {...task, isDone} : task)})\r\n    }\r\n\r\n    const removeTodoList = (todoListId: string) => {\r\n        setTodoLists(todoLists.filter(todoList => todoList.id !== todoListId))\r\n        delete tasks[todoListId]\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {\r\n                todoLists.map(todoList => {\r\n                    return <Todo\r\n                        key={todoList.id}\r\n                        id={todoList.id}\r\n                        title={todoList.title}\r\n                        tasks={tasks}\r\n                        removeTask={removeTask}\r\n                        removeTodoList={removeTodoList}\r\n                        changeFilter={changeFilter}\r\n                        addTask={addTask}\r\n                        changeStatus={changeStatus}\r\n                        filter={todoList.filter}/>\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}